
<CascadingValue Value="this">

    <div class="fsh-style mainAndBottom">

        <div class="wizard-custom">
            <div class="pb-4  d-flex justify-content-between">

                @foreach (var step in Steps)
                {
                    var i = Steps.IndexOf(step) + 1;
                    var active = ActiveStepIx + 1;
                    <div class="text-decoration-none item-wizard" href="javascript: void(0)" @onclick="@(e=> CheckClick(step))">
                        <div class="wizard-header @(((active==i)? "is-active" : (active > i) ? "is-complete" : "is-Inactive"))">
                            <div class="tab-number">@(Steps.IndexOf(step) + 1)</div><div class="title">   @step.Title </div>
                        </div>
                    </div>
                }
                @* @onclick="@(e => SetActive(step))" *@

            </div>
        </div>
        @* -------------------------------- new sales organization tab ----------------------- *@
        <div class="wizard-body">
            @* <Loading display=DisplayLoading /> *@
            @ChildContent
        </div>
    </div>

        <div class="bottom-row bg-white text-center">

            <button class="btn  btn-footer-prive" @onclick="GoBack">Back </button>

            <button class="btn  btn-purple btn-footer-next" @onclick="GoNext">
                @(IsLastStep ? "Finish" : "Next")
            </button>
        </div>




</CascadingValue>


@code
{
    /// <summary>
    /// List of <see cref="WizardStep"/> added to the Wizard
    /// </summary>
    protected internal List<WizardStep> Steps { get; set; } = new List<WizardStep>();
    [Parameter] public EventCallback<WizardStep> OnActiveStepIndexChanged { get; set; }
    [Parameter] public EventCallback<WizardStep> OnActiveStepIndexChanging { get; set; }

    public string FinalNavigateUrl { get; set; }
    public string PreviousNavigateUrl { get; set; }
    /// <summary>
    /// The control Id
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// The ChildContent container for <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// The Active <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public WizardStep ActiveStep { get; set; }

    /// <summary>
    /// The Index number of the <see cref="ActiveStep"/>
    /// </summary>
    [Parameter]
    public int ActiveStepIx { get; set; } = 0;

    /// <summary>
    /// Determines whether the Wizard is in the last step
    /// </summary>

    public bool IsLastStep { get; set; }

    public bool DisplayFooter { get; set; }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the previous Index
    /// </summary>

    protected internal async Task GoBack()
    {
        if (ActiveStepIx > 0)
        {
            await SetActive(Steps[ActiveStepIx - 1]);
            IsCancel = false;
        }
        else
           if (!string.IsNullOrEmpty(PreviousNavigateUrl))
            gNavMan.NavigateTo(PreviousNavigateUrl);
    }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the next Index
    /// </summary>
    public async Task GoNext()
    {
        // validate wizard step
        await OnActiveStepIndexChanged.InvokeAsync(Steps[ActiveStepIx]);
        // submit wizard step
        bool retval = await Steps[ActiveStepIx].Submit();
        if (!retval) return;
        // go next step
        if (ActiveStepIx < Steps.Count - 1)
            await SetActive(Steps[(Steps.IndexOf(ActiveStep) + 1)]);
        else // this means that should navigate final url
        if (!string.IsNullOrEmpty(FinalNavigateUrl))
            gNavMan.NavigateTo(FinalNavigateUrl);
    }

    public async Task CheckActiveStep()
    {
        if (IsCancel) return;
        if (ActiveStepIx < Steps.Count - 1)
            await SetActive(Steps[(Steps.IndexOf(ActiveStep) + 1)]);

        await OnActiveStepIndexChanged.InvokeAsync(Steps[Steps.IndexOf(ActiveStep) + 1]);
    }


    public bool IsCancel { get; set; }

    public bool DisplayLoading { get; set; } = false;
    /// <summary>
    /// Populates the <see cref="ActiveStep"/> the Sets the passed in <see cref="WizardStep"/> instance as the
    /// </summary>
    /// <param name="step">The WizardStep</param>

    protected internal async Task SetActive(WizardStep step)
    {
        ActiveStep = step ?? throw new ArgumentNullException(nameof(step));

        ActiveStepIx = StepsIndex(step);
        if (ActiveStepIx == Steps.Count - 1)
            IsLastStep = true;
        else
            IsLastStep = false;

    }
    protected internal async Task CheckClick(WizardStep step)
    {
        var distance = StepsIndex(step) - ActiveStepIx;
        if (distance != 1)
        {
            return;
        }
        await GoNext();

    }

    /// <summary>
    /// Retrieves the index of the current <see cref="WizardStep"/> in the Step List
    /// </summary>
    /// <param name="step">The WizardStep</param>
    /// <returns></returns>
    public int StepsIndex(WizardStep step) => StepsIndexInternal(step);

    protected int StepsIndexInternal(WizardStep step)
    {
        if (step == null)
            throw new ArgumentNullException(nameof(step));
        DisplayFooter = step.DisplayFooter == null ? true : (bool)step.DisplayFooter;

        return Steps.IndexOf(step);
    }

    /// <summary>
    /// Adds a <see cref="WizardStep"/> to the WizardSteps list
    /// </summary>
    /// <param name="step"></param>
    protected internal void AddStep(WizardStep step)
    {
        step.IsValid = false;
        step.IsSubmited = false;
        Steps.Add(step);
    }

    public override bool Equals(object obj)
    {
        return obj is Wizard wizard &&
               EqualityComparer<List<WizardStep>>.Default.Equals(Steps, wizard.Steps);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SetActive(Steps[0]);
            StateHasChanged();
        }
    }
    public async Task AddStepAsync(WizardStep step)
    {
        // Asynchronous operations...

        // Add step
        Steps.Add(step);

        // Notify Blazor to re-render the component
        StateHasChanged();
    }
}